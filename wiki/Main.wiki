#summary gp2xemu main page

= Introduction =
----
*Gp2xemu* is an emulator which emulates the [http://www.gp2x.co.uk gp2x] handheld device.
The goal is to be able to boot a working bootloader and OS. By emulating an RS-232 port via the EXT port, one can get visual feedback without audio and graphics. Audio and graphics will be added at the end of the development cycle, if *at all*. This emulator isn't made with gaming in mind, but to aid developers in debugging firmware.

== Documentation ==
  *  Helpful documentation can be found [http://www.mechcore.net/files/docs/ here]
  *  GNU ARM as reference for macros, directives and psuedo-instructions can be found [http://www.mechcore.net/files/docs/GasARMRef.pdf here]
  *  A nice ARM opcode reference made by Re-Eject can be found [http://www.mechcore.net/files/docs/armref.pdf here]
  *  A nice ARM Thumb opcode reference made by Re-Eject can be found [http://www.mechcore.net/files/docs/ThumbRefV2-beta.pdf here]
  *  The specifications for the MMSP2 System-On-A-Chip can be found [http://www.mechcore.net/files/docs/MP2520F_Manual_Eng_V1.0.pdf here]

The GP2X uses some extra peripherals which is not a part of the MMSP2. I'll add them later when the time comes.
=== Suggested books ==
The _ARM System Developer's Guide_ (Morgan Kaufmann series) can be bought from [http://www.amazon.com/ARM-System-Developers-Guide-Architecture/dp/1558608745 Amazon]

== TODO ==
  #  Implement the full ARMv4 instruction set and the _M_ extension (xMLAL, xMULL). This also includes defining structures for the PSRs, the 16 general-purpose registers and the banked registers.
  #  Come up with a code design for reading the NAND image located under /trunk/gp2x-emu/nand, fetch the instructions and dispatching them.
  #  Implement structures to hold states related to the MMU and MPU.
  #  Implement structures to hold states related to SD memory (cache regions and access regions?)
  #  Abstract away the difference between absolute memory and hardware registers, and allow relocation.
  #  Implement the different peripherals, starting with the _memory controller_, _interrupt controller_, _timer_/_watchdog timer_ and the _RS-232 port_.